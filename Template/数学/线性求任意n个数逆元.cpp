线性求任意 n 个数的逆元¶
上面的方法只能求  到  的逆元，如果需要求任意给定  个数（）的逆元，就需要下面的方法：

首先计算  个数的前缀积，记为 ，然后使用快速幂或扩展欧几里得法计算  的逆元，记为 。

因为  是  个数的积的逆元，所以当我们把它乘上  时，就会和  的逆元抵消，于是就得到了  到  的积逆元，记为 。

同理我们可以依次计算出所有的 ，于是  就可以用  求得。

所以我们就在  的时间内计算出了  个数的逆元。

代码实现

s[0] = 1;
for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p;
sv[n] = qpow(s[n], p - 2);
// 当然这里也可以用 exgcd 来求逆元,视个人喜好而定.
for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p;
for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p;